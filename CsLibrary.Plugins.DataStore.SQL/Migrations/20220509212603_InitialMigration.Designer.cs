// <auto-generated />
using System;
using CsLibrary.Plugins.DataStore.SQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CsLibrary.Plugins.DataStore.SQL.Migrations
{
    [DbContext(typeof(MarketContext))]
    [Migration("20220509212603_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CsLibrary.CoreBusiness.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("60d70416-906c-4c1c-8f5e-a0183bf6cada"),
                            Description = "Beverage",
                            Name = "Beverage"
                        },
                        new
                        {
                            CategoryId = new Guid("e3980339-1e2e-49b2-acd4-bc80d245e446"),
                            Description = "Bakery",
                            Name = "Bakery"
                        },
                        new
                        {
                            CategoryId = new Guid("0bfb6c1a-af0c-4a14-848f-f6912a10e2ab"),
                            Description = "Meat",
                            Name = "Meat"
                        });
                });

            modelBuilder.Entity("CsLibrary.CoreBusiness.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("3645bfdf-16e7-42a4-abdb-cc38c770eb8a"),
                            CategoryId = new Guid("60d70416-906c-4c1c-8f5e-a0183bf6cada"),
                            Name = "Iced Tea",
                            Price = 1.99,
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = new Guid("3a8e9167-a66a-4b19-88f7-8c6ed0821229"),
                            CategoryId = new Guid("60d70416-906c-4c1c-8f5e-a0183bf6cada"),
                            Name = "Canada Dry",
                            Price = 1.99,
                            Quantity = 200
                        },
                        new
                        {
                            ProductId = new Guid("a3921483-a45e-4cb7-846d-7c28446bf7a6"),
                            CategoryId = new Guid("e3980339-1e2e-49b2-acd4-bc80d245e446"),
                            Name = "Whole Wheat Bread",
                            Price = 1.5,
                            Quantity = 300
                        },
                        new
                        {
                            ProductId = new Guid("70fb6660-0bba-428d-a5a7-814eb3b3bf47"),
                            CategoryId = new Guid("e3980339-1e2e-49b2-acd4-bc80d245e446"),
                            Name = "White Bread",
                            Price = 1.5,
                            Quantity = 300
                        });
                });

            modelBuilder.Entity("CsLibrary.CoreBusiness.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BeforeQty")
                        .HasColumnType("int");

                    b.Property<string>("CashierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoldQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId")
                        .HasName("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CsLibrary.CoreBusiness.Product", b =>
                {
                    b.HasOne("CsLibrary.CoreBusiness.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CsLibrary.CoreBusiness.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
