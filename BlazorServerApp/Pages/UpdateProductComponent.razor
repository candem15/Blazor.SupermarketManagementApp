@page "/updateproduct/{productId}"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager _navigationManager
@inject CsLibrary.UseCases.IUpdateProductUseCase _updateProductUseCase
@inject CsLibrary.UseCases.IGetProductByIdUseCase _getProductByIdUseCase
@inject CsLibrary.UseCases.IViewCategoriesUseCase _viewCategoriesUseCase
<h3>Update Product</h3>
<br />
@if (product is not null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="category">Category</label>
            <select class="form-control" aria-label="Default select example" id="category" @bind="product.CategoryId" >
                <option value="" disabled selected>Select your category</option>
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryId">@category.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="product.Name" class="form-control"> </InputText>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"> </InputNumber>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control"> </InputNumber>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>

        <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public string ProductId { get; set; }
    private Product product;
     private IEnumerable<Category> categories;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        categories = _viewCategoriesUseCase.Execute();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var prodct = _getProductByIdUseCase.Execute(Guid.Parse(this.ProductId));
        this.product = new Product
        {
            ProductId = prodct.ProductId,
            CategoryId = prodct.CategoryId,
            Name = prodct.Name,
            Price = prodct.Price,
            Quantity = prodct.Quantity,

        };
    }
    private void OnValidSubmit()
    {
        _updateProductUseCase.Execute(this.product);
        _navigationManager.NavigateTo("/products");
    }
    private void OnCancel()
    {
        _navigationManager.NavigateTo("/products");
    }
}