@page "/updatecategory/{categoryId}"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager _navigationManager
@inject CsLibrary.UseCases.IUpdateCategoryUseCase _updateCategoryUseCase
@inject CsLibrary.UseCases.IGetCategoryByIdUseCase _getCategoryByIdUseCase

<h3>Update Category</h3>
<br/>
@if (category is not null)
{
    <EditForm Model="category" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="category.Name" class="form-control"> </InputText>
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="category.Description" class="form-control"> </InputText>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>

        <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public string CategoryId { get; set; }
    private Category category;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var cat = _getCategoryByIdUseCase.Execute(Guid.Parse(this.CategoryId));
        this.category = new Category { CategoryId = cat.CategoryId, Name = cat.Name, Description = cat.Description };
    }

    private void OnValidSubmit()
    {
        _updateCategoryUseCase.Execute(this.category);
        _navigationManager.NavigateTo("/categories");
    }
    private void OnCancel()
    {
        _navigationManager.NavigateTo("/categories");
    }
}